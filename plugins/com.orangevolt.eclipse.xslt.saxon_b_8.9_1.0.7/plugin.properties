saxon.output_property.cdata_section_elements=specifies a whitespace delimited list of the names of elements whose text node children should be output using CDATA sections
saxon.output_property.doctype_public=see the documentation for the DOCTYPE_SYSTEM property for a description of what the value of the key should be
saxon.output_property.doctype_system=specifies the public identifier to be used in the document type declaration
saxon.output_property.encoding=specifies the preferred character encoding that the Transformer should use to encode sequences of characters as sequences of bytes
saxon.output_property.indent=specifies whether the Transformer may add additional whitespace when outputting the result tree; the value must be yes or no
saxon.output_property.media_type=specifies the media type (MIME content type) of the data that results from outputting the result tree. The charset parameter should not be specified explicitly; instead, when the top-level media type is text, a charset parameter should be added according to the character encoding actually used by the output method
saxon.output_property.method=(xml | html | text | <expanded name>) the method attribute identifies the overall method that should be used for outputting the result tree
saxon.output_property.omit_xml_declaration=specifies whether the XSLT processor should output an XML declaration; the value must be yes or no
saxon.output_property.standalone=specifies whether the Transformer should output a standalone document declaration; the value must be yes or no
saxon.output_property.version=specifies the version of the output method
saxon.output_property.indent_spaces=(integer value).Defines the number of spaces used for indentation of output
saxon.output_property.use_character_maps=(list-of-qnames)Defines the character maps used in this output definition. The QNames are represented in Clark notation as {uri}local-name.
saxon.output_property.include_content_type=include-content-type = "yes" | "no". This attribute is defined in XSLT 2.0. Indicates whether the META tag is to be added to HTML output.
saxon.output_property.undeclare_namespaces=include-content-type = "yes" | "no". This attribute is defined in XSLT 2.0. Indicates XML 1.1 namespace declarations are to be output.
saxon.output_property.escape_uri_attributes=escape-uri-attributes = "yes" | "no". This attribute is defined in XSLT 2.0. Indicates whether HTML attributes of type URI are to be URI-escaped.
saxon.output_property.character_representation=(rep1[;rep2]). Indicates the preferred way of representing non-ASCII characters in HTML and XML output. rep1 is for characters in the range 128-256, rep2 for those above 256.
saxon.output_property.next_in_chain=(uri). Indicates that the output is to be piped into another XSLT stylesheet to perform another transformation. The auxiliary property NEXT_IN_CHAIN_BASE_URI records the base URI of the stylesheet element where this attribute was found.
saxon.output_property.type_information=(none|preserve|strict|lax). Indicates the value of the type-information attribute: "none", "preserve", "strict", "lax"
saxon.output_property.byte_order_mark=(yes|no). Indicates whether UTF-8/UTF-16 output is to start with a byte order mark. Values are "yes" or "no", default is "no".
saxon.output_property.require_well_formed=(yes|no). Indicates whether a user-supplied ContentHandler requires the stream of SAX events to be well-formed (that is, to have a single element node and no text nodes as children of the root). The default is "no".

saxon.feature.allow_external_functions=true if the stylesheet allows external functions to be called. Default is true. The setting false is recommended in an environment where untrusted stylesheets may be executed. Setting this value to false  also disables user-defined extension elements, together with the writing of multiple output files, all of which carry similar security risks.
saxon.feature.trace_external_functions=true if the tracing of calls to external Java methods is required. Default is false. This switch is useful when analyzing why Saxon fails to find a Java method to match an extension function call in the stylesheet, or why it chooses one method over another when several are available. The trace output is sent to System.err.
saxon.feature.timing=true if basic timing information is to be output to the standard error output stream.
saxon.feature.tree_model=Builder.STANDARD_TREE or Builder.TINY_TREE. Selects an implementation of the Saxon tree model. The default is Builder.TINY_TREE.
saxon.feature.trace_listener=an instance of the class net.sf.saxon.trace.TraceListener. This object will be notified of significant events occurring during the transformation, for tracing or debugging purposes.
saxon.feature.line_numbering=indicates whether line numbers are to be maintained for the source document. This will not be possible if the source document is supplied as a DOM. The line numbers are accessible through the tracing interface, and also via the saxon:line-number() extension function.
saxon.feature.recovery_policy=An Integer. Indicates how dynamic errors should be handled. One of the values (defined as constants in the Controller class) RECOVER_SILENTLY, RECOVER_WITH_WARNINGS, or DO_NOT_RECOVER).
saxon.feature.message_emitter_class=The full name of a class that implements the net.sf.saxon.output.Emitter interface; the class will be used to format the output of the xsl:message instruction.
saxon.feature.source_parser_class=The full name of a class that implements the org.xml.sax.XMLReader interface; the class will be used to parse source documents (that is, the principal source document plus any secondary source documents read using the document() function)
saxon.feature.style_parser_class=The full name of a class that implements the org.xml.sax.XMLReader interface; the class will be used to parse stylesheet documents (that is, the principal stylesheet module plus any secondary source documents read using xsl:include or xsl:import)
saxon.feature.uri_output_resolver=An instance of the class net.sf.saxon.OutputURIResolver; this object will be used to resolve URIs of secondary result documents specified in the href attribute of the xsl:result-document  instruction
saxon.feature.dtd_validation=Indicates whether the XML parser should be asked to validate source documents against their DTD. This applies to the initial source document and any source documents read using the document() function, unless handled by a user-written URIResolver.
saxon.feature.validation_warnings=This determines whether validation errors in result documents should be treated as fatal. By default they are fatal; with this option set, they are treated as warnings.
saxon.feature.schema_validation=(boolean) This determines whether source documents should be parsed with schema-validation enabled.
saxon.feature.version_warning=This determines whether a warning should be output when running an XSLT 2.0 processor against an XSLT 1.0 stylesheet. The XSLT specification requires this to be done by default.
saxon.feature.name_pool=A instance of class net.sf.saxon.om.NamePool. Indicates that the supplied NamePool should be used as the target (run-time) NamePool by all stylesheets compiled (using newTemplates()) after this call on setAttribute. Normally a single system-allocated NamePool is used for all stylesheets compiled while the Java VM remains loaded; this attribute allows user control over the allocation of NamePools. Note that source trees used as input to a transformation must be built using the same NamePool that is used when the stylesheet is compiled: this will happen automatically if the input to a transformation is supplied as a SAXSource or StreamSource but it is under user control if you build the source tree yourself.
